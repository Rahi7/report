{
  "language": "Solidity",
  "sources": {
    "contracts/Medlock.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.8;\r\n\r\nerror NotOwner();\r\nerror NotDoctor();\r\nerror NotPatient();\r\n\r\ncontract Medlock {\r\n    address public owner;\r\n\r\n    uint256 public nextHospitalId = 1;\r\n    uint256 public nextPrescriptionId = 1;\r\n    uint256 public nextPatientId = 1;\r\n    uint256 public nextDoctorId = 1;\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        if (msg.sender != owner) revert NotOwner();\r\n        _;\r\n    }\r\n\r\n    modifier onlyDoctor() {\r\n        string memory license = doctorLicenses[msg.sender];\r\n        if (bytes(license).length == 0) revert NotDoctor();\r\n        _;\r\n    }\r\n\r\n    modifier onlyPatient(string memory aadhaar) {\r\n        if (aadhaarToAddress[aadhaar] != msg.sender) revert NotPatient();\r\n        _;\r\n    }\r\n\r\n    struct Hospital {\r\n        uint256 hospitalId;\r\n        string name;\r\n        bool isRegistered;\r\n    }\r\n\r\n    struct Doctor {\r\n        string doctorId;\r\n        string licenseNumber;\r\n        string name;\r\n        string specialization;\r\n        uint256 hospitalId;\r\n    }\r\n\r\n    struct Patient {\r\n        string patientId;\r\n        string aadhaar;\r\n        string name;\r\n        string dob;\r\n        string contactDetails;\r\n    }\r\n\r\n    struct Prescription {\r\n        uint256 prescriptionId;\r\n        string patientId;\r\n        string doctorId;\r\n        string issueDate;\r\n        string diagnosis;\r\n        string treatment;\r\n        string remarks;\r\n    }\r\n\r\n    mapping(address => Hospital) public hospitals;\r\n    mapping(uint256 => address) public hospitalById;\r\n\r\n    mapping(address => string) public doctorLicenses;\r\n    mapping(string => Doctor) public doctors; // license => Doctor\r\n    mapping(string => string) public licenseToDoctorId;\r\n\r\n    mapping(address => string) public patientAadhaars;\r\n    mapping(string => address) public aadhaarToAddress;\r\n    mapping(string => Patient) public patients; // aadhaar => Patient\r\n    mapping(string => string) public aadhaarToPatientId;\r\n\r\n    mapping(string => Prescription[]) public prescriptions; // patientId => list of prescriptions\r\n\r\n    function registerHospital(address _hospitalAddress, string memory _name) public onlyOwner {\r\n        require(!hospitals[_hospitalAddress].isRegistered, \"Already registered\");\r\n\r\n        hospitals[_hospitalAddress] = Hospital(nextHospitalId, _name, true);\r\n        hospitalById[nextHospitalId] = _hospitalAddress;\r\n        nextHospitalId++;\r\n    }\r\n\r\n    function registerDoctor(\r\n        address _wallet,\r\n        string memory _licenseNumber,\r\n        string memory _name,\r\n        string memory _specialization,\r\n        uint256 _hospitalId\r\n    ) public {\r\n        require(bytes(doctorLicenses[_wallet]).length == 0, \"Doctor already registered\");\r\n        require(bytes(doctors[_licenseNumber].doctorId).length == 0, \"License number already registered\");\r\n\r\n        doctorLicenses[_wallet] = _licenseNumber;\r\n\r\n        string memory doctorId = generateDoctorId(nextDoctorId++);\r\n        licenseToDoctorId[_licenseNumber] = doctorId;\r\n\r\n        doctors[_licenseNumber] = Doctor(doctorId, _licenseNumber, _name, _specialization, _hospitalId);\r\n    }\r\n\r\n    function registerPatient(\r\n        address _wallet,\r\n        string memory _aadhaar,\r\n        string memory _name,\r\n        string memory _dob,\r\n        string memory _contactDetails\r\n    ) public  {\r\n        require(aadhaarToAddress[_aadhaar] == address(0), \"Aadhaar already registered\");\r\n        require(bytes(patientAadhaars[_wallet]).length == 0, \"Wallet already used\");\r\n\r\n        patientAadhaars[_wallet] = _aadhaar;\r\n        aadhaarToAddress[_aadhaar] = _wallet;\r\n\r\n        string memory patientId = generatePatientId(nextPatientId++);\r\n        aadhaarToPatientId[_aadhaar] = patientId;\r\n\r\n        patients[_aadhaar] = Patient(patientId, _aadhaar, _name, _dob, _contactDetails);\r\n    }\r\n\r\n    function addPrescription(\r\n        string memory _aadhaar,\r\n        string memory _diagnosis,\r\n        string memory _treatment,\r\n        string memory _remarks\r\n    ) public onlyDoctor {\r\n        string memory license = doctorLicenses[msg.sender];\r\n        string memory doctorId = licenseToDoctorId[license];\r\n        require(aadhaarToAddress[_aadhaar] != address(0), \"Patient not registered\");\r\n\r\n        string memory patientId = aadhaarToPatientId[_aadhaar];\r\n        string memory issueDate = uintToString(block.timestamp);\r\n\r\n        prescriptions[patientId].push(\r\n            Prescription(\r\n                nextPrescriptionId++,\r\n                patientId,\r\n                doctorId,\r\n                issueDate,\r\n                _diagnosis,\r\n                _treatment,\r\n                _remarks\r\n            )\r\n        );\r\n    }\r\n\r\n    function getMyProfile() public view returns (\r\n        string memory patientId,\r\n        string memory name,\r\n        string memory dob,\r\n        string memory contactDetails\r\n    ) {\r\n        string memory aadhaar = patientAadhaars[msg.sender];\r\n        require(bytes(aadhaar).length > 0, \"Not registered\");\r\n\r\n        Patient memory p = patients[aadhaar];\r\n        return (p.patientId, p.name, p.dob, p.contactDetails);\r\n    }\r\n\r\n    function getMyPrescriptions() public view returns (Prescription[] memory) {\r\n        string memory aadhaar = patientAadhaars[msg.sender];\r\n        require(bytes(aadhaar).length > 0, \"Not registered\");\r\n\r\n        string memory patientId = aadhaarToPatientId[aadhaar];\r\n        return prescriptions[patientId];\r\n    }\r\n\r\n    function isHospitalRegistered(address _hospitalAddress) public view returns (bool) {\r\n    return hospitals[_hospitalAddress].isRegistered;\r\n    }\r\n\r\nfunction isDoctorRegistered(address _wallet) public view returns (bool) {\r\n    return bytes(doctorLicenses[_wallet]).length != 0;\r\n}\r\n\r\nfunction isPatientRegistered(string memory _aadhaar) public view returns (bool) {\r\n    return aadhaarToAddress[_aadhaar] != address(0);\r\n}\r\n\r\n\r\n    function uintToString(uint256 _i) internal pure returns (string memory) {\r\n        if (_i == 0) return \"0\";\r\n        uint256 temp = _i;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (_i != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(_i % 10)));\r\n            _i /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    function generatePatientId(uint256 _id) internal pure returns (string memory) {\r\n        if (_id < 10) return string(abi.encodePacked(\"P00\", uintToString(_id)));\r\n        if (_id < 100) return string(abi.encodePacked(\"P0\", uintToString(_id)));\r\n        return string(abi.encodePacked(\"P\", uintToString(_id)));\r\n    }\r\n\r\n    function generateDoctorId(uint256 _id) internal pure returns (string memory) {\r\n        if (_id < 10) return string(abi.encodePacked(\"D00\", uintToString(_id)));\r\n        if (_id < 100) return string(abi.encodePacked(\"D0\", uintToString(_id)));\r\n        return string(abi.encodePacked(\"D\", uintToString(_id)));\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "evmVersion": "paris",
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}